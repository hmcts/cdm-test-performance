package uk.gov.hmcts.ccd.corecasedata.scenarios

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import uk.gov.hmcts.ccd.corecasedata.scenarios.utils.Environment

object CreateUser {

  val MinThinkTime = Environment.minThinkTime
  val MaxThinkTime = Environment.maxThinkTime
  val CommonHeader = Environment.commonHeader
  val CCDAPIEnvurl = Environment.baseURL
//  val feedUserData = csv("CaseSharingUsers_Small.csv")
  val feedUserData = csv("RolesForUsers.csv")
  val roleFeeder = csv("RolesToAdd.csv").circular

  val headers_1 = Map( //ServiceAuthorization token can be called from http://rpe-service-auth-provider-perftest.service.core-compute-perftest.internal/testing-support/lease
    "Content-Type" -> "application/json",
    "Accept" -> "application/json")

  val IdamAdminLogin =

    exec(http("AdminLogin")
      .post("https://idam-api.perftest.platform.hmcts.net/loginUser")
      .header("accept", "application/json")
      .header("Content-Type", "application/x-www-form-urlencoded")
      .formParam("password", "Ref0rmIsFun")
      .formParam("username", "idamOwner@hmcts.net")
      .check(jsonPath("$.api_auth_token").saveAs("authToken")))

  val headers_0 = Map( //Authorization token needs to be generated by User Login
    "Authorization" -> "AdminApiAuthToken ${authToken}",
    "Content-Type" -> "application/json")

  val IdamUser = feed(feedUserData)

    .exec(http("GetUserID")
      .get("https://idam-api.perftest.platform.hmcts.net/users?email=${email}") //${email}
      .headers(headers_0)
      .check(jsonPath("$.id").saveAs("userId"))
      .check(status.saveAs("statusvalue")))
//     .doIf(session=>session("statusvalue").as[String].contains("200")) {
//       exec {
//         session =>
//           val fw = new BufferedWriter(new FileWriter("EmailAndIdamIDs.csv", true))
//           try {
//             fw.write(session("email").as[String] + ","+session("userId").as[String] + "\r\n")
//           }
//           finally fw.close()
//           session
//       }
//     }

  val GetAndApplyRole = feed(roleFeeder)

    .exec(http("GetRole_${role}")
      .get("https://idam-api.perftest.platform.hmcts.net/roles/name/${role}")
      .headers(headers_0)
      .check(jsonPath("$.id").saveAs("roleId")))

    .exec(http("ApplyRole_${role}")
      .patch("https://idam-api.perftest.platform.hmcts.net/users/${userId}/roles/${roleId}")
      .headers(headers_0))

    .exec {
      session =>
        println(session("email").as[String])
        println(session("role").as[String])
        session
    }

    .pause(1)

//   val DeleteUser = feed(feedDeleteData)

// //    exec(http("DeleteIdamUser")
// //      .delete("https://idam-api.perftest.platform.hmcts.net/users/${userId}")
// //      .headers(headers_0))

//     .exec(http("DeleteUser")
//       .delete("https://idam-api.perftest.platform.hmcts.net/testing-support/accounts/${Email}")
//       .headers(headers_1))

//       .exec {
//       session =>
//         println(session("Email").as[String])
//         session
//     }

  val CreateUserProfile = feed(feedUserData)

    .exec(http("request_4")
      .post("http://ccd-user-profile-api-perftest.service.core-compute-perftest.internal/user-profile/users")
      .headers(headers_1)
      .body(StringBody("{\n    \"id\": \"${CCDUserName}\",\n    \"jurisdictions\": [{\"id\": \"DIVORCE\"},{\"id\": \"AUTOTEST1\"},{\"id\": \"CMC\"},{\"id\": \"PROBATE\"},{\"id\": \"SSCS\"},{\"id\": \"TRIBUNALS\"},{\"id\": \"EMPLOYMENT\"}],\n    \"work_basket_default_jurisdiction\": \"DIVORCE\",\n    \"work_basket_default_case_type\": \"DIVORCE\",\n    \"work_basket_default_state\": \"Submitted\"\n}")))

    // .exec {
    //   session =>
    //     println(session("CCDUserName").as[String])
    //     session
    // }

    .pause(1)

}
